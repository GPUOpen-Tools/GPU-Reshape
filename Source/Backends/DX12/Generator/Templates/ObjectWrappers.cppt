// Common
#include <Common/Allocators.h>
#include <Common/GlobalUID.h>

// Layer
#include <Backends/DX12/Table.Gen.h>
#include <Backends/DX12/Command/UserCommandBuffer.h>
$INCLUDES

/// Unwrap a type derived from IUnknown
template<typename T, typename = std::enable_if_t<std::is_base_of_v<IUnknown, T>>>
static T* Unwrap(T* top) {
    using U = std::remove_const_t<T>;

    U* next;
    if (top && SUCCEEDED(const_cast<U*>(top)->QueryInterface(IID_Unwrap, reinterpret_cast<void**>(&next)))) {
        return next;
    }

    return top;
}

/// Pass through unwrapper
template<typename T, typename = std::enable_if_t<!std::is_base_of_v<IUnknown, T>>>
static const T& Unwrap(const T& top) {
    return top;
}

/// Exception, workaround for odd-behaviour in driver land regarding up-chain device calls through DXGI swapchain creation
static ID3D12LifetimeOwner* Unwrap(ID3D12LifetimeOwner* top) {
    return top;
}

/// Unwrap a component
IUnknown* UnwrapObject(IUnknown* object) {
    return Unwrap(object);
}


/* Hooks */

$HOOKS

/* Detouring */

$DETOURS

/* Getters */

$GETTERS
