// 
// The MIT License (MIT)
// 
// Copyright (c) 2024 Advanced Micro Devices, Inc.,
// Fatalist Development AB (Avalanche Studio Group),
// and Miguel Petersen.
// 
// All Rights Reserved.
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy 
// of this software and associated documentation files (the "Software"), to deal 
// in the Software without restriction, including without limitation the rights 
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies 
// of the Software, and to permit persons to whom the Software is furnished to do so, 
// subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all 
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR 
// PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE 
// FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, 
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
// 

#pragma once

// Layer
#include "Vulkan.h"
#include "States/PipelineType.h"

// Common
#include <Common/Assert.h>

// Backend
#include <Backend/IL/Format.h>
#include <Backend/IL/AddressSpace.h>
#include <Backend/IL/TextureDimension.h>

inline VkFormat Translate(Backend::IL::Format format) {
    switch (format) {
        default:
        ASSERT(false, "Invalid format");
            return VK_FORMAT_UNDEFINED;
        case Backend::IL::Format::RGBA32Float:
            return VK_FORMAT_R32G32B32A32_SFLOAT;
        case Backend::IL::Format::RGBA16Float:
            return VK_FORMAT_R16G16B16A16_SFLOAT;
        case Backend::IL::Format::R32Float:
            return VK_FORMAT_R32_SFLOAT;
        case Backend::IL::Format::RGBA8:
            return VK_FORMAT_R8G8B8A8_UNORM;
        case Backend::IL::Format::RGBA8Snorm:
            return VK_FORMAT_R8G8B8A8_SNORM;
        case Backend::IL::Format::RG32Float:
            return VK_FORMAT_R32G32_SFLOAT;
        case Backend::IL::Format::RG16Float:
            return VK_FORMAT_R16G16_SFLOAT;
        case Backend::IL::Format::R11G11B10Float:
            return VK_FORMAT_B10G11R11_UFLOAT_PACK32;
        case Backend::IL::Format::R16Float:
            return VK_FORMAT_R16_SFLOAT;
        case Backend::IL::Format::RGBA16:
            return VK_FORMAT_R16G16B16A16_UNORM;
        case Backend::IL::Format::RGB10A2:
            return VK_FORMAT_A2B10G10R10_SNORM_PACK32;
        case Backend::IL::Format::RG16:
            return VK_FORMAT_R16G16_UNORM;
        case Backend::IL::Format::RG8:
            return VK_FORMAT_R8G8_UNORM;
        case Backend::IL::Format::R16:
            return VK_FORMAT_R16_UNORM;
        case Backend::IL::Format::R8:
            return VK_FORMAT_R8_UNORM;
        case Backend::IL::Format::RGBA16Snorm:
            return VK_FORMAT_R16G16B16A16_SNORM;
        case Backend::IL::Format::RG16Snorm:
            return VK_FORMAT_R16G16_SNORM;
        case Backend::IL::Format::RG8Snorm:
            return VK_FORMAT_R8G8_SNORM;
        case Backend::IL::Format::R16Snorm:
            return VK_FORMAT_R16_SNORM;
        case Backend::IL::Format::R8Snorm:
            return VK_FORMAT_R8_SNORM;
        case Backend::IL::Format::RGBA32Int:
            return VK_FORMAT_R32G32B32_SINT;
        case Backend::IL::Format::RGBA16Int:
            return VK_FORMAT_R16G16B16A16_SINT;
        case Backend::IL::Format::RGBA8Int:
            return VK_FORMAT_R8G8B8A8_SINT;
        case Backend::IL::Format::R32Int:
            return VK_FORMAT_R32_SINT;
        case Backend::IL::Format::RG32Int:
            return VK_FORMAT_R32G32_SINT;
        case Backend::IL::Format::RG16Int:
            return VK_FORMAT_R16G16_SINT;
        case Backend::IL::Format::RG8Int:
            return VK_FORMAT_R8G8_SINT;
        case Backend::IL::Format::R16Int:
            return VK_FORMAT_R16_SINT;
        case Backend::IL::Format::R8Int:
            return VK_FORMAT_R8_SINT;
        case Backend::IL::Format::RGBA32UInt:
            return VK_FORMAT_R32G32B32A32_UINT;
        case Backend::IL::Format::RGBA16UInt:
            return VK_FORMAT_R16G16B16A16_UINT;
        case Backend::IL::Format::RGBA8UInt:
            return VK_FORMAT_R8G8B8A8_UINT;
        case Backend::IL::Format::R32UInt:
            return VK_FORMAT_R32_UINT;
        case Backend::IL::Format::RGB10a2UInt:
            return VK_FORMAT_A2R10G10B10_UINT_PACK32;
        case Backend::IL::Format::RG32UInt:
            return VK_FORMAT_R32G32_UINT;
        case Backend::IL::Format::RG16UInt:
            return VK_FORMAT_R16G16_UINT;
        case Backend::IL::Format::RG8UInt:
            return VK_FORMAT_R8G8_UINT;
        case Backend::IL::Format::R16UInt:
            return VK_FORMAT_R16_UINT;
        case Backend::IL::Format::R8UInt:
            return VK_FORMAT_R8_UINT;
    }
}

inline Backend::IL::Format Translate(VkFormat format) {
    switch (format) {
        default:
            return Backend::IL::Format::None;
        case VK_FORMAT_R32G32B32A32_SFLOAT:
            return Backend::IL::Format::RGBA32Float;
        case VK_FORMAT_R16G16B16A16_SFLOAT:
            return Backend::IL::Format::RGBA16Float;
        case VK_FORMAT_R32_SFLOAT:
            return Backend::IL::Format::R32Float;
        case VK_FORMAT_R8G8B8A8_UNORM:
            return Backend::IL::Format::RGBA8;
        case VK_FORMAT_R8G8B8A8_SNORM:
            return Backend::IL::Format::RGBA8Snorm;
        case VK_FORMAT_R32G32_SFLOAT:
            return Backend::IL::Format::RG32Float;
        case VK_FORMAT_R16G16_SFLOAT:
            return Backend::IL::Format::RG16Float;
        case VK_FORMAT_B10G11R11_UFLOAT_PACK32:
            return Backend::IL::Format::R11G11B10Float;
        case VK_FORMAT_R16_SFLOAT:
            return Backend::IL::Format::R16Float;
        case VK_FORMAT_R16G16B16A16_UNORM:
            return Backend::IL::Format::RGBA16;
        case VK_FORMAT_A2B10G10R10_SNORM_PACK32:
            return Backend::IL::Format::RGB10A2;
        case VK_FORMAT_R16G16_UNORM:
            return Backend::IL::Format::RG16;
        case VK_FORMAT_R8G8_UNORM:
            return Backend::IL::Format::RG8;
        case VK_FORMAT_R16_UNORM:
            return Backend::IL::Format::R16;
        case VK_FORMAT_R8_UNORM:
            return Backend::IL::Format::R8;
        case VK_FORMAT_R16G16B16A16_SNORM:
            return Backend::IL::Format::RGBA16Snorm;
        case VK_FORMAT_R16G16_SNORM:
            return Backend::IL::Format::RG16Snorm;
        case VK_FORMAT_R8G8_SNORM:
            return Backend::IL::Format::RG8Snorm;
        case VK_FORMAT_R16_SNORM:
            return Backend::IL::Format::R16Snorm;
        case VK_FORMAT_R8_SNORM:
            return Backend::IL::Format::R8Snorm;
        case VK_FORMAT_R32G32B32_SINT:
            return Backend::IL::Format::RGBA32Int;
        case VK_FORMAT_R16G16B16A16_SINT:
            return Backend::IL::Format::RGBA16Int;
        case VK_FORMAT_R8G8B8A8_SINT:
            return Backend::IL::Format::RGBA8Int;
        case VK_FORMAT_R32_SINT:
            return Backend::IL::Format::R32Int;
        case VK_FORMAT_R32G32_SINT:
            return Backend::IL::Format::RG32Int;
        case VK_FORMAT_R16G16_SINT:
            return Backend::IL::Format::RG16Int;
        case VK_FORMAT_R8G8_SINT:
            return Backend::IL::Format::RG8Int;
        case VK_FORMAT_R16_SINT:
            return Backend::IL::Format::R16Int;
        case VK_FORMAT_R8_SINT:
            return Backend::IL::Format::R8Int;
        case VK_FORMAT_R32G32B32A32_UINT:
            return Backend::IL::Format::RGBA32UInt;
        case VK_FORMAT_R16G16B16A16_UINT:
            return Backend::IL::Format::RGBA16UInt;
        case VK_FORMAT_R8G8B8A8_UINT:
            return Backend::IL::Format::RGBA8UInt;
        case VK_FORMAT_R32_UINT:
            return Backend::IL::Format::R32UInt;
        case VK_FORMAT_A2R10G10B10_UINT_PACK32:
            return Backend::IL::Format::RGB10a2UInt;
        case VK_FORMAT_R32G32_UINT:
            return Backend::IL::Format::RG32UInt;
        case VK_FORMAT_R16G16_UINT:
            return Backend::IL::Format::RG16UInt;
        case VK_FORMAT_R8G8_UINT:
            return Backend::IL::Format::RG8UInt;
        case VK_FORMAT_R16_UINT:
            return Backend::IL::Format::R16UInt;
        case VK_FORMAT_R8_UINT:
            return Backend::IL::Format::R8UInt;
    }
}

inline uint32_t GetFormatByteSize(VkFormat format) {
    // Based on the vulkan-loader format utilities
    switch (format) {
        default:
            return 0;
        case VK_FORMAT_R4G4_UNORM_PACK8:
            return 1;
        case VK_FORMAT_R4G4B4A4_UNORM_PACK16:
            return 2;
        case VK_FORMAT_B4G4R4A4_UNORM_PACK16:
            return 2;
        case VK_FORMAT_R5G6B5_UNORM_PACK16:
            return 2;
        case VK_FORMAT_B5G6R5_UNORM_PACK16:
            return 2;
        case VK_FORMAT_R5G5B5A1_UNORM_PACK16:
            return 2;
        case VK_FORMAT_B5G5R5A1_UNORM_PACK16:
            return 2;
        case VK_FORMAT_A1R5G5B5_UNORM_PACK16:
            return 2;
        case VK_FORMAT_R8_UNORM:
            return 1;
        case VK_FORMAT_R8_SNORM:
            return 1;
        case VK_FORMAT_R8_USCALED:
            return 1;
        case VK_FORMAT_R8_SSCALED:
            return 1;
        case VK_FORMAT_R8_UINT:
            return 1;
        case VK_FORMAT_R8_SINT:
            return 1;
        case VK_FORMAT_R8_SRGB:
            return 1;
        case VK_FORMAT_R8G8_UNORM:
            return 2;
        case VK_FORMAT_R8G8_SNORM:
            return 2;
        case VK_FORMAT_R8G8_USCALED:
            return 2;
        case VK_FORMAT_R8G8_SSCALED:
            return 2;
        case VK_FORMAT_R8G8_UINT:
            return 2;
        case VK_FORMAT_R8G8_SINT:
            return 2;
        case VK_FORMAT_R8G8_SRGB:
            return 2;
        case VK_FORMAT_R8G8B8_UNORM:
            return 3;
        case VK_FORMAT_R8G8B8_SNORM:
            return 3;
        case VK_FORMAT_R8G8B8_USCALED:
            return 3;
        case VK_FORMAT_R8G8B8_SSCALED:
            return 3;
        case VK_FORMAT_R8G8B8_UINT:
            return 3;
        case VK_FORMAT_R8G8B8_SINT:
            return 3;
        case VK_FORMAT_R8G8B8_SRGB:
            return 3;
        case VK_FORMAT_B8G8R8_UNORM:
            return 3;
        case VK_FORMAT_B8G8R8_SNORM:
            return 3;
        case VK_FORMAT_B8G8R8_USCALED:
            return 3;
        case VK_FORMAT_B8G8R8_SSCALED:
            return 3;
        case VK_FORMAT_B8G8R8_UINT:
            return 3;
        case VK_FORMAT_B8G8R8_SINT:
            return 3;
        case VK_FORMAT_B8G8R8_SRGB:
            return 3;
        case VK_FORMAT_R8G8B8A8_UNORM:
            return 4;
        case VK_FORMAT_R8G8B8A8_SNORM:
            return 4;
        case VK_FORMAT_R8G8B8A8_USCALED:
            return 4;
        case VK_FORMAT_R8G8B8A8_SSCALED:
            return 4;
        case VK_FORMAT_R8G8B8A8_UINT:
            return 4;
        case VK_FORMAT_R8G8B8A8_SINT:
            return 4;
        case VK_FORMAT_R8G8B8A8_SRGB:
            return 4;
        case VK_FORMAT_B8G8R8A8_UNORM:
            return 4;
        case VK_FORMAT_B8G8R8A8_SNORM:
            return 4;
        case VK_FORMAT_B8G8R8A8_USCALED:
            return 4;
        case VK_FORMAT_B8G8R8A8_SSCALED:
            return 4;
        case VK_FORMAT_B8G8R8A8_UINT:
            return 4;
        case VK_FORMAT_B8G8R8A8_SINT:
            return 4;
        case VK_FORMAT_B8G8R8A8_SRGB:
            return 4;
        case VK_FORMAT_A8B8G8R8_UNORM_PACK32:
            return 4;
        case VK_FORMAT_A8B8G8R8_SNORM_PACK32:
            return 4;
        case VK_FORMAT_A8B8G8R8_USCALED_PACK32:
            return 4;
        case VK_FORMAT_A8B8G8R8_SSCALED_PACK32:
            return 4;
        case VK_FORMAT_A8B8G8R8_UINT_PACK32:
            return 4;
        case VK_FORMAT_A8B8G8R8_SINT_PACK32:
            return 4;
        case VK_FORMAT_A8B8G8R8_SRGB_PACK32:
            return 4;
        case VK_FORMAT_A2R10G10B10_UNORM_PACK32:
            return 4;
        case VK_FORMAT_A2R10G10B10_SNORM_PACK32:
            return 4;
        case VK_FORMAT_A2R10G10B10_USCALED_PACK32:
            return 4;
        case VK_FORMAT_A2R10G10B10_SSCALED_PACK32:
            return 4;
        case VK_FORMAT_A2R10G10B10_UINT_PACK32:
            return 4;
        case VK_FORMAT_A2R10G10B10_SINT_PACK32:
            return 4;
        case VK_FORMAT_A2B10G10R10_UNORM_PACK32:
            return 4;
        case VK_FORMAT_A2B10G10R10_SNORM_PACK32:
            return 4;
        case VK_FORMAT_A2B10G10R10_USCALED_PACK32:
            return 4;
        case VK_FORMAT_A2B10G10R10_SSCALED_PACK32:
            return 4;
        case VK_FORMAT_A2B10G10R10_UINT_PACK32:
            return 4;
        case VK_FORMAT_A2B10G10R10_SINT_PACK32:
            return 4;
        case VK_FORMAT_R16_UNORM:
            return 2;
        case VK_FORMAT_R16_SNORM:
            return 2;
        case VK_FORMAT_R16_USCALED:
            return 2;
        case VK_FORMAT_R16_SSCALED:
            return 2;
        case VK_FORMAT_R16_UINT:
            return 2;
        case VK_FORMAT_R16_SINT:
            return 2;
        case VK_FORMAT_R16_SFLOAT:
            return 2;
        case VK_FORMAT_R16G16_UNORM:
            return 4;
        case VK_FORMAT_R16G16_SNORM:
            return 4;
        case VK_FORMAT_R16G16_USCALED:
            return 4;
        case VK_FORMAT_R16G16_SSCALED:
            return 4;
        case VK_FORMAT_R16G16_UINT:
            return 4;
        case VK_FORMAT_R16G16_SINT:
            return 4;
        case VK_FORMAT_R16G16_SFLOAT:
            return 4;
        case VK_FORMAT_R16G16B16_UNORM:
            return 6;
        case VK_FORMAT_R16G16B16_SNORM:
            return 6;
        case VK_FORMAT_R16G16B16_USCALED:
            return 6;
        case VK_FORMAT_R16G16B16_SSCALED:
            return 6;
        case VK_FORMAT_R16G16B16_UINT:
            return 6;
        case VK_FORMAT_R16G16B16_SINT:
            return 6;
        case VK_FORMAT_R16G16B16_SFLOAT:
            return 6;
        case VK_FORMAT_R16G16B16A16_UNORM:
            return 8;
        case VK_FORMAT_R16G16B16A16_SNORM:
            return 8;
        case VK_FORMAT_R16G16B16A16_USCALED:
            return 8;
        case VK_FORMAT_R16G16B16A16_SSCALED:
            return 8;
        case VK_FORMAT_R16G16B16A16_UINT:
            return 8;
        case VK_FORMAT_R16G16B16A16_SINT:
            return 8;
        case VK_FORMAT_R16G16B16A16_SFLOAT:
            return 8;
        case VK_FORMAT_R32_UINT:
            return 4;
        case VK_FORMAT_R32_SINT:
            return 4;
        case VK_FORMAT_R32_SFLOAT:
            return 4;
        case VK_FORMAT_R32G32_UINT:
            return 8;
        case VK_FORMAT_R32G32_SINT:
            return 8;
        case VK_FORMAT_R32G32_SFLOAT:
            return 8;
        case VK_FORMAT_R32G32B32_UINT:
            return 1;
        case VK_FORMAT_R32G32B32_SINT:
            return 1;
        case VK_FORMAT_R32G32B32_SFLOAT:
            return 1;
        case VK_FORMAT_R32G32B32A32_UINT:
            return 1;
        case VK_FORMAT_R32G32B32A32_SINT:
            return 1;
        case VK_FORMAT_R32G32B32A32_SFLOAT:
            return 1;
        case VK_FORMAT_R64_UINT:
            return 8;
        case VK_FORMAT_R64_SINT:
            return 8;
        case VK_FORMAT_R64_SFLOAT:
            return 8;
        case VK_FORMAT_R64G64_UINT:
            return 1;
        case VK_FORMAT_R64G64_SINT:
            return 1;
        case VK_FORMAT_R64G64_SFLOAT:
            return 1;
        case VK_FORMAT_R64G64B64_UINT:
            return 2;
        case VK_FORMAT_R64G64B64_SINT:
            return 2;
        case VK_FORMAT_R64G64B64_SFLOAT:
            return 2;
        case VK_FORMAT_R64G64B64A64_UINT:
            return 3;
        case VK_FORMAT_R64G64B64A64_SINT:
            return 3;
        case VK_FORMAT_R64G64B64A64_SFLOAT:
            return 3;
        case VK_FORMAT_B10G11R11_UFLOAT_PACK32:
            return 4;
        case VK_FORMAT_E5B9G9R9_UFLOAT_PACK32:
            return 4;
        case VK_FORMAT_D16_UNORM:
            return 2;
        case VK_FORMAT_X8_D24_UNORM_PACK32:
            return 4;
        case VK_FORMAT_D32_SFLOAT:
            return 4;
        case VK_FORMAT_S8_UINT:
            return 1;
        case VK_FORMAT_D16_UNORM_S8_UINT:
            return 3;
        case VK_FORMAT_D24_UNORM_S8_UINT:
            return 4;
        case VK_FORMAT_D32_SFLOAT_S8_UINT:
            return 8;
        case VK_FORMAT_BC1_RGB_UNORM_BLOCK:
            return 8;
        case VK_FORMAT_BC1_RGB_SRGB_BLOCK:
            return 8;
        case VK_FORMAT_BC1_RGBA_UNORM_BLOCK:
            return 8;
        case VK_FORMAT_BC1_RGBA_SRGB_BLOCK:
            return 8;
        case VK_FORMAT_BC2_UNORM_BLOCK:
            return 1;
        case VK_FORMAT_BC2_SRGB_BLOCK:
            return 1;
        case VK_FORMAT_BC3_UNORM_BLOCK:
            return 1;
        case VK_FORMAT_BC3_SRGB_BLOCK:
            return 1;
        case VK_FORMAT_BC4_UNORM_BLOCK:
            return 8;
        case VK_FORMAT_BC4_SNORM_BLOCK:
            return 8;
        case VK_FORMAT_BC5_UNORM_BLOCK:
            return 1;
        case VK_FORMAT_BC5_SNORM_BLOCK:
            return 1;
        case VK_FORMAT_BC6H_UFLOAT_BLOCK:
            return 1;
        case VK_FORMAT_BC6H_SFLOAT_BLOCK:
            return 1;
        case VK_FORMAT_BC7_UNORM_BLOCK:
            return 1;
        case VK_FORMAT_BC7_SRGB_BLOCK:
            return 1;
        case VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK:
            return 8;
        case VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK:
            return 8;
        case VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK:
            return 8;
        case VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK:
            return 8;
        case VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK:
            return 1;
        case VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK:
            return 1;
        case VK_FORMAT_EAC_R11_UNORM_BLOCK:
            return 8;
        case VK_FORMAT_EAC_R11_SNORM_BLOCK:
            return 8;
        case VK_FORMAT_EAC_R11G11_UNORM_BLOCK:
            return 1;
        case VK_FORMAT_EAC_R11G11_SNORM_BLOCK:
            return 1;
        case VK_FORMAT_ASTC_4x4_UNORM_BLOCK:
            return 1;
        case VK_FORMAT_ASTC_4x4_SRGB_BLOCK:
            return 1;
        case VK_FORMAT_ASTC_5x4_UNORM_BLOCK:
            return 1;
        case VK_FORMAT_ASTC_5x4_SRGB_BLOCK:
            return 1;
        case VK_FORMAT_ASTC_5x5_UNORM_BLOCK:
            return 1;
        case VK_FORMAT_ASTC_5x5_SRGB_BLOCK:
            return 1;
        case VK_FORMAT_ASTC_6x5_UNORM_BLOCK:
            return 1;
        case VK_FORMAT_ASTC_6x5_SRGB_BLOCK:
            return 1;
        case VK_FORMAT_ASTC_6x6_UNORM_BLOCK:
            return 1;
        case VK_FORMAT_ASTC_6x6_SRGB_BLOCK:
            return 1;
        case VK_FORMAT_ASTC_8x5_UNORM_BLOCK:
            return 1;
        case VK_FORMAT_ASTC_8x5_SRGB_BLOCK:
            return 1;
        case VK_FORMAT_ASTC_8x6_UNORM_BLOCK:
            return 1;
        case VK_FORMAT_ASTC_8x6_SRGB_BLOCK:
            return 1;
        case VK_FORMAT_ASTC_8x8_UNORM_BLOCK:
            return 1;
        case VK_FORMAT_ASTC_8x8_SRGB_BLOCK:
            return 1;
        case VK_FORMAT_ASTC_10x5_UNORM_BLOCK:
            return 1;
        case VK_FORMAT_ASTC_10x5_SRGB_BLOCK:
            return 1;
        case VK_FORMAT_ASTC_10x6_UNORM_BLOCK:
            return 1;
        case VK_FORMAT_ASTC_10x6_SRGB_BLOCK:
            return 1;
        case VK_FORMAT_ASTC_10x8_UNORM_BLOCK:
            return 1;
        case VK_FORMAT_ASTC_10x8_SRGB_BLOCK:
            return 1;
        case VK_FORMAT_ASTC_10x10_UNORM_BLOCK:
            return 1;
        case VK_FORMAT_ASTC_10x10_SRGB_BLOCK:
            return 1;
        case VK_FORMAT_ASTC_12x10_UNORM_BLOCK:
            return 1;
        case VK_FORMAT_ASTC_12x10_SRGB_BLOCK:
            return 1;
        case VK_FORMAT_ASTC_12x12_UNORM_BLOCK:
            return 1;
        case VK_FORMAT_ASTC_12x12_SRGB_BLOCK:
            return 1;
        case VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG:
            return 8;
        case VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG:
            return 8;
        case VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG:
            return 8;
        case VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG:
            return 8;
        case VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG:
            return 8;
        case VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG:
            return 8;
        case VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG:
            return 8;
    }
}

inline VkImageType Translate(Backend::IL::TextureDimension dim) {
    switch (dim) {
        default:
        ASSERT(false, "Invalid dimension");
            return VK_IMAGE_TYPE_MAX_ENUM;
        case Backend::IL::TextureDimension::Texture1D:
        case Backend::IL::TextureDimension::Texture1DArray:
            return VK_IMAGE_TYPE_1D;
        case Backend::IL::TextureDimension::Texture2D:
        case Backend::IL::TextureDimension::Texture2DArray:
        case Backend::IL::TextureDimension::Texture2DCube:
            return VK_IMAGE_TYPE_2D;
        case Backend::IL::TextureDimension::Texture3D:
            return VK_IMAGE_TYPE_3D;
    }
}

inline VkImageViewType TranslateViewType(Backend::IL::TextureDimension dim) {
    switch (dim) {
        default:
        ASSERT(false, "Invalid dimension");
            return VK_IMAGE_VIEW_TYPE_MAX_ENUM;
        case Backend::IL::TextureDimension::Texture1D:
            return VK_IMAGE_VIEW_TYPE_1D;
        case Backend::IL::TextureDimension::Texture1DArray:
            return VK_IMAGE_VIEW_TYPE_1D_ARRAY;
        case Backend::IL::TextureDimension::Texture2D:
            return VK_IMAGE_VIEW_TYPE_2D;
        case Backend::IL::TextureDimension::Texture2DArray:
            return VK_IMAGE_VIEW_TYPE_2D_ARRAY;
        case Backend::IL::TextureDimension::Texture3D:
            return VK_IMAGE_VIEW_TYPE_3D;
        case Backend::IL::TextureDimension::Texture2DCube:
            return VK_IMAGE_VIEW_TYPE_CUBE;
    }
}

inline VkPipelineBindPoint Translate(PipelineType type) {
    switch (type) {
        default:
            ASSERT(false, "Invalid pipeline type");
            return {};
        case PipelineType::Graphics:
            return VK_PIPELINE_BIND_POINT_GRAPHICS;
        case PipelineType::Compute:
            return VK_PIPELINE_BIND_POINT_COMPUTE;
        case PipelineType::Raytracing:
            return VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR;
    }
}

inline PipelineType Translate(VkPipelineBindPoint type) {
    switch (type) {
        default:
            ASSERT(false, "Unsupported pipeline type");
            return {};
        case VK_PIPELINE_BIND_POINT_GRAPHICS:
            return PipelineType::Graphics;
        case VK_PIPELINE_BIND_POINT_COMPUTE:
            return PipelineType::Compute;
        case VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR:
            return PipelineType::Raytracing;
    }
}

inline const char *GetFormatString(VkFormat format) {
    switch (format) {
        default:
            return "UNDEFINED";
        case VK_FORMAT_R4G4_UNORM_PACK8:
            return "R4G4_UNORM_PACK8";
        case VK_FORMAT_R4G4B4A4_UNORM_PACK16:
            return "R4G4B4A4_UNORM_PACK16";
        case VK_FORMAT_B4G4R4A4_UNORM_PACK16:
            return "B4G4R4A4_UNORM_PACK16";
        case VK_FORMAT_R5G6B5_UNORM_PACK16:
            return "R5G6B5_UNORM_PACK16";
        case VK_FORMAT_B5G6R5_UNORM_PACK16:
            return "B5G6R5_UNORM_PACK16";
        case VK_FORMAT_R5G5B5A1_UNORM_PACK16:
            return "R5G5B5A1_UNORM_PACK16";
        case VK_FORMAT_B5G5R5A1_UNORM_PACK16:
            return "B5G5R5A1_UNORM_PACK16";
        case VK_FORMAT_A1R5G5B5_UNORM_PACK16:
            return "A1R5G5B5_UNORM_PACK16";
        case VK_FORMAT_R8_UNORM:
            return "R8_UNORM";
        case VK_FORMAT_R8_SNORM:
            return "R8_SNORM";
        case VK_FORMAT_R8_USCALED:
            return "R8_USCALED";
        case VK_FORMAT_R8_SSCALED:
            return "R8_SSCALED";
        case VK_FORMAT_R8_UINT:
            return "R8_UINT";
        case VK_FORMAT_R8_SINT:
            return "R8_SINT";
        case VK_FORMAT_R8_SRGB:
            return "R8_SRGB";
        case VK_FORMAT_R8G8_UNORM:
            return "R8G8_UNORM";
        case VK_FORMAT_R8G8_SNORM:
            return "R8G8_SNORM";
        case VK_FORMAT_R8G8_USCALED:
            return "R8G8_USCALED";
        case VK_FORMAT_R8G8_SSCALED:
            return "R8G8_SSCALED";
        case VK_FORMAT_R8G8_UINT:
            return "R8G8_UINT";
        case VK_FORMAT_R8G8_SINT:
            return "R8G8_SINT";
        case VK_FORMAT_R8G8_SRGB:
            return "R8G8_SRGB";
        case VK_FORMAT_R8G8B8_UNORM:
            return "R8G8B8_UNORM";
        case VK_FORMAT_R8G8B8_SNORM:
            return "R8G8B8_SNORM";
        case VK_FORMAT_R8G8B8_USCALED:
            return "R8G8B8_USCALED";
        case VK_FORMAT_R8G8B8_SSCALED:
            return "R8G8B8_SSCALED";
        case VK_FORMAT_R8G8B8_UINT:
            return "R8G8B8_UINT";
        case VK_FORMAT_R8G8B8_SINT:
            return "R8G8B8_SINT";
        case VK_FORMAT_R8G8B8_SRGB:
            return "R8G8B8_SRGB";
        case VK_FORMAT_B8G8R8_UNORM:
            return "B8G8R8_UNORM";
        case VK_FORMAT_B8G8R8_SNORM:
            return "B8G8R8_SNORM";
        case VK_FORMAT_B8G8R8_USCALED:
            return "B8G8R8_USCALED";
        case VK_FORMAT_B8G8R8_SSCALED:
            return "B8G8R8_SSCALED";
        case VK_FORMAT_B8G8R8_UINT:
            return "B8G8R8_UINT";
        case VK_FORMAT_B8G8R8_SINT:
            return "B8G8R8_SINT";
        case VK_FORMAT_B8G8R8_SRGB:
            return "B8G8R8_SRGB";
        case VK_FORMAT_R8G8B8A8_UNORM:
            return "R8G8B8A8_UNORM";
        case VK_FORMAT_R8G8B8A8_SNORM:
            return "R8G8B8A8_SNORM";
        case VK_FORMAT_R8G8B8A8_USCALED:
            return "R8G8B8A8_USCALED";
        case VK_FORMAT_R8G8B8A8_SSCALED:
            return "R8G8B8A8_SSCALED";
        case VK_FORMAT_R8G8B8A8_UINT:
            return "R8G8B8A8_UINT";
        case VK_FORMAT_R8G8B8A8_SINT:
            return "R8G8B8A8_SINT";
        case VK_FORMAT_R8G8B8A8_SRGB:
            return "R8G8B8A8_SRGB";
        case VK_FORMAT_B8G8R8A8_UNORM:
            return "B8G8R8A8_UNORM";
        case VK_FORMAT_B8G8R8A8_SNORM:
            return "B8G8R8A8_SNORM";
        case VK_FORMAT_B8G8R8A8_USCALED:
            return "B8G8R8A8_USCALED";
        case VK_FORMAT_B8G8R8A8_SSCALED:
            return "B8G8R8A8_SSCALED";
        case VK_FORMAT_B8G8R8A8_UINT:
            return "B8G8R8A8_UINT";
        case VK_FORMAT_B8G8R8A8_SINT:
            return "B8G8R8A8_SINT";
        case VK_FORMAT_B8G8R8A8_SRGB:
            return "B8G8R8A8_SRGB";
        case VK_FORMAT_A8B8G8R8_UNORM_PACK32:
            return "A8B8G8R8_UNORM_PACK32";
        case VK_FORMAT_A8B8G8R8_SNORM_PACK32:
            return "A8B8G8R8_SNORM_PACK32";
        case VK_FORMAT_A8B8G8R8_USCALED_PACK32:
            return "A8B8G8R8_USCALED_PACK32";
        case VK_FORMAT_A8B8G8R8_SSCALED_PACK32:
            return "A8B8G8R8_SSCALED_PACK32";
        case VK_FORMAT_A8B8G8R8_UINT_PACK32:
            return "A8B8G8R8_UINT_PACK32";
        case VK_FORMAT_A8B8G8R8_SINT_PACK32:
            return "A8B8G8R8_SINT_PACK32";
        case VK_FORMAT_A8B8G8R8_SRGB_PACK32:
            return "A8B8G8R8_SRGB_PACK32";
        case VK_FORMAT_A2R10G10B10_UNORM_PACK32:
            return "A2R10G10B10_UNORM_PACK32";
        case VK_FORMAT_A2R10G10B10_SNORM_PACK32:
            return "A2R10G10B10_SNORM_PACK32";
        case VK_FORMAT_A2R10G10B10_USCALED_PACK32:
            return "A2R10G10B10_USCALED_PACK32";
        case VK_FORMAT_A2R10G10B10_SSCALED_PACK32:
            return "A2R10G10B10_SSCALED_PACK32";
        case VK_FORMAT_A2R10G10B10_UINT_PACK32:
            return "A2R10G10B10_UINT_PACK32";
        case VK_FORMAT_A2R10G10B10_SINT_PACK32:
            return "A2R10G10B10_SINT_PACK32";
        case VK_FORMAT_A2B10G10R10_UNORM_PACK32:
            return "A2B10G10R10_UNORM_PACK32";
        case VK_FORMAT_A2B10G10R10_SNORM_PACK32:
            return "A2B10G10R10_SNORM_PACK32";
        case VK_FORMAT_A2B10G10R10_USCALED_PACK32:
            return "A2B10G10R10_USCALED_PACK32";
        case VK_FORMAT_A2B10G10R10_SSCALED_PACK32:
            return "A2B10G10R10_SSCALED_PACK32";
        case VK_FORMAT_A2B10G10R10_UINT_PACK32:
            return "A2B10G10R10_UINT_PACK32";
        case VK_FORMAT_A2B10G10R10_SINT_PACK32:
            return "A2B10G10R10_SINT_PACK32";
        case VK_FORMAT_R16_UNORM:
            return "R16_UNORM";
        case VK_FORMAT_R16_SNORM:
            return "R16_SNORM";
        case VK_FORMAT_R16_USCALED:
            return "R16_USCALED";
        case VK_FORMAT_R16_SSCALED:
            return "R16_SSCALED";
        case VK_FORMAT_R16_UINT:
            return "R16_UINT";
        case VK_FORMAT_R16_SINT:
            return "R16_SINT";
        case VK_FORMAT_R16_SFLOAT:
            return "R16_SFLOAT";
        case VK_FORMAT_R16G16_UNORM:
            return "R16G16_UNORM";
        case VK_FORMAT_R16G16_SNORM:
            return "R16G16_SNORM";
        case VK_FORMAT_R16G16_USCALED:
            return "R16G16_USCALED";
        case VK_FORMAT_R16G16_SSCALED:
            return "R16G16_SSCALED";
        case VK_FORMAT_R16G16_UINT:
            return "R16G16_UINT";
        case VK_FORMAT_R16G16_SINT:
            return "R16G16_SINT";
        case VK_FORMAT_R16G16_SFLOAT:
            return "R16G16_SFLOAT";
        case VK_FORMAT_R16G16B16_UNORM:
            return "R16G16B16_UNORM";
        case VK_FORMAT_R16G16B16_SNORM:
            return "R16G16B16_SNORM";
        case VK_FORMAT_R16G16B16_USCALED:
            return "R16G16B16_USCALED";
        case VK_FORMAT_R16G16B16_SSCALED:
            return "R16G16B16_SSCALED";
        case VK_FORMAT_R16G16B16_UINT:
            return "R16G16B16_UINT";
        case VK_FORMAT_R16G16B16_SINT:
            return "R16G16B16_SINT";
        case VK_FORMAT_R16G16B16_SFLOAT:
            return "R16G16B16_SFLOAT";
        case VK_FORMAT_R16G16B16A16_UNORM:
            return "R16G16B16A16_UNORM";
        case VK_FORMAT_R16G16B16A16_SNORM:
            return "R16G16B16A16_SNORM";
        case VK_FORMAT_R16G16B16A16_USCALED:
            return "R16G16B16A16_USCALED";
        case VK_FORMAT_R16G16B16A16_SSCALED:
            return "R16G16B16A16_SSCALED";
        case VK_FORMAT_R16G16B16A16_UINT:
            return "R16G16B16A16_UINT";
        case VK_FORMAT_R16G16B16A16_SINT:
            return "R16G16B16A16_SINT";
        case VK_FORMAT_R16G16B16A16_SFLOAT:
            return "R16G16B16A16_SFLOAT";
        case VK_FORMAT_R32_UINT:
            return "R32_UINT";
        case VK_FORMAT_R32_SINT:
            return "R32_SINT";
        case VK_FORMAT_R32_SFLOAT:
            return "R32_SFLOAT";
        case VK_FORMAT_R32G32_UINT:
            return "R32G32_UINT";
        case VK_FORMAT_R32G32_SINT:
            return "R32G32_SINT";
        case VK_FORMAT_R32G32_SFLOAT:
            return "R32G32_SFLOAT";
        case VK_FORMAT_R32G32B32_UINT:
            return "R32G32B32_UINT";
        case VK_FORMAT_R32G32B32_SINT:
            return "R32G32B32_SINT";
        case VK_FORMAT_R32G32B32_SFLOAT:
            return "R32G32B32_SFLOAT";
        case VK_FORMAT_R32G32B32A32_UINT:
            return "R32G32B32A32_UINT";
        case VK_FORMAT_R32G32B32A32_SINT:
            return "R32G32B32A32_SINT";
        case VK_FORMAT_R32G32B32A32_SFLOAT:
            return "R32G32B32A32_SFLOAT";
        case VK_FORMAT_R64_UINT:
            return "R64_UINT";
        case VK_FORMAT_R64_SINT:
            return "R64_SINT";
        case VK_FORMAT_R64_SFLOAT:
            return "R64_SFLOAT";
        case VK_FORMAT_R64G64_UINT:
            return "R64G64_UINT";
        case VK_FORMAT_R64G64_SINT:
            return "R64G64_SINT";
        case VK_FORMAT_R64G64_SFLOAT:
            return "R64G64_SFLOAT";
        case VK_FORMAT_R64G64B64_UINT:
            return "R64G64B64_UINT";
        case VK_FORMAT_R64G64B64_SINT:
            return "R64G64B64_SINT";
        case VK_FORMAT_R64G64B64_SFLOAT:
            return "R64G64B64_SFLOAT";
        case VK_FORMAT_R64G64B64A64_UINT:
            return "R64G64B64A64_UINT";
        case VK_FORMAT_R64G64B64A64_SINT:
            return "R64G64B64A64_SINT";
        case VK_FORMAT_R64G64B64A64_SFLOAT:
            return "R64G64B64A64_SFLOAT";
        case VK_FORMAT_B10G11R11_UFLOAT_PACK32:
            return "B10G11R11_UFLOAT_PACK32";
        case VK_FORMAT_E5B9G9R9_UFLOAT_PACK32:
            return "E5B9G9R9_UFLOAT_PACK32";
        case VK_FORMAT_D16_UNORM:
            return "D16_UNORM";
        case VK_FORMAT_X8_D24_UNORM_PACK32:
            return "X8_D24_UNORM_PACK32";
        case VK_FORMAT_D32_SFLOAT:
            return "D32_SFLOAT";
        case VK_FORMAT_S8_UINT:
            return "S8_UINT";
        case VK_FORMAT_D16_UNORM_S8_UINT:
            return "D16_UNORM_S8_UINT";
        case VK_FORMAT_D24_UNORM_S8_UINT:
            return "D24_UNORM_S8_UINT";
        case VK_FORMAT_D32_SFLOAT_S8_UINT:
            return "D32_SFLOAT_S8_UINT";
        case VK_FORMAT_BC1_RGB_UNORM_BLOCK:
            return "BC1_RGB_UNORM_BLOCK";
        case VK_FORMAT_BC1_RGB_SRGB_BLOCK:
            return "BC1_RGB_SRGB_BLOCK";
        case VK_FORMAT_BC1_RGBA_UNORM_BLOCK:
            return "BC1_RGBA_UNORM_BLOCK";
        case VK_FORMAT_BC1_RGBA_SRGB_BLOCK:
            return "BC1_RGBA_SRGB_BLOCK";
        case VK_FORMAT_BC2_UNORM_BLOCK:
            return "BC2_UNORM_BLOCK";
        case VK_FORMAT_BC2_SRGB_BLOCK:
            return "BC2_SRGB_BLOCK";
        case VK_FORMAT_BC3_UNORM_BLOCK:
            return "BC3_UNORM_BLOCK";
        case VK_FORMAT_BC3_SRGB_BLOCK:
            return "BC3_SRGB_BLOCK";
        case VK_FORMAT_BC4_UNORM_BLOCK:
            return "BC4_UNORM_BLOCK";
        case VK_FORMAT_BC4_SNORM_BLOCK:
            return "BC4_SNORM_BLOCK";
        case VK_FORMAT_BC5_UNORM_BLOCK:
            return "BC5_UNORM_BLOCK";
        case VK_FORMAT_BC5_SNORM_BLOCK:
            return "BC5_SNORM_BLOCK";
        case VK_FORMAT_BC6H_UFLOAT_BLOCK:
            return "BC6H_UFLOAT_BLOCK";
        case VK_FORMAT_BC6H_SFLOAT_BLOCK:
            return "BC6H_SFLOAT_BLOCK";
        case VK_FORMAT_BC7_UNORM_BLOCK:
            return "BC7_UNORM_BLOCK";
        case VK_FORMAT_BC7_SRGB_BLOCK:
            return "BC7_SRGB_BLOCK";
        case VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK:
            return "ETC2_R8G8B8_UNORM_BLOCK";
        case VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK:
            return "ETC2_R8G8B8_SRGB_BLOCK";
        case VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK:
            return "ETC2_R8G8B8A1_UNORM_BLOCK";
        case VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK:
            return "ETC2_R8G8B8A1_SRGB_BLOCK";
        case VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK:
            return "ETC2_R8G8B8A8_UNORM_BLOCK";
        case VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK:
            return "ETC2_R8G8B8A8_SRGB_BLOCK";
        case VK_FORMAT_EAC_R11_UNORM_BLOCK:
            return "EAC_R11_UNORM_BLOCK";
        case VK_FORMAT_EAC_R11_SNORM_BLOCK:
            return "EAC_R11_SNORM_BLOCK";
        case VK_FORMAT_EAC_R11G11_UNORM_BLOCK:
            return "EAC_R11G11_UNORM_BLOCK";
        case VK_FORMAT_EAC_R11G11_SNORM_BLOCK:
            return "EAC_R11G11_SNORM_BLOCK";
        case VK_FORMAT_ASTC_4x4_UNORM_BLOCK:
            return "ASTC_4x4_UNORM_BLOCK";
        case VK_FORMAT_ASTC_4x4_SRGB_BLOCK:
            return "ASTC_4x4_SRGB_BLOCK";
        case VK_FORMAT_ASTC_5x4_UNORM_BLOCK:
            return "ASTC_5x4_UNORM_BLOCK";
        case VK_FORMAT_ASTC_5x4_SRGB_BLOCK:
            return "ASTC_5x4_SRGB_BLOCK";
        case VK_FORMAT_ASTC_5x5_UNORM_BLOCK:
            return "ASTC_5x5_UNORM_BLOCK";
        case VK_FORMAT_ASTC_5x5_SRGB_BLOCK:
            return "ASTC_5x5_SRGB_BLOCK";
        case VK_FORMAT_ASTC_6x5_UNORM_BLOCK:
            return "ASTC_6x5_UNORM_BLOCK";
        case VK_FORMAT_ASTC_6x5_SRGB_BLOCK:
            return "ASTC_6x5_SRGB_BLOCK";
        case VK_FORMAT_ASTC_6x6_UNORM_BLOCK:
            return "ASTC_6x6_UNORM_BLOCK";
        case VK_FORMAT_ASTC_6x6_SRGB_BLOCK:
            return "ASTC_6x6_SRGB_BLOCK";
        case VK_FORMAT_ASTC_8x5_UNORM_BLOCK:
            return "ASTC_8x5_UNORM_BLOCK";
        case VK_FORMAT_ASTC_8x5_SRGB_BLOCK:
            return "ASTC_8x5_SRGB_BLOCK";
        case VK_FORMAT_ASTC_8x6_UNORM_BLOCK:
            return "ASTC_8x6_UNORM_BLOCK";
        case VK_FORMAT_ASTC_8x6_SRGB_BLOCK:
            return "ASTC_8x6_SRGB_BLOCK";
        case VK_FORMAT_ASTC_8x8_UNORM_BLOCK:
            return "ASTC_8x8_UNORM_BLOCK";
        case VK_FORMAT_ASTC_8x8_SRGB_BLOCK:
            return "ASTC_8x8_SRGB_BLOCK";
        case VK_FORMAT_ASTC_10x5_UNORM_BLOCK:
            return "ASTC_10x5_UNORM_BLOCK";
        case VK_FORMAT_ASTC_10x5_SRGB_BLOCK:
            return "ASTC_10x5_SRGB_BLOCK";
        case VK_FORMAT_ASTC_10x6_UNORM_BLOCK:
            return "ASTC_10x6_UNORM_BLOCK";
        case VK_FORMAT_ASTC_10x6_SRGB_BLOCK:
            return "ASTC_10x6_SRGB_BLOCK";
        case VK_FORMAT_ASTC_10x8_UNORM_BLOCK:
            return "ASTC_10x8_UNORM_BLOCK";
        case VK_FORMAT_ASTC_10x8_SRGB_BLOCK:
            return "ASTC_10x8_SRGB_BLOCK";
        case VK_FORMAT_ASTC_10x10_UNORM_BLOCK:
            return "ASTC_10x10_UNORM_BLOCK";
        case VK_FORMAT_ASTC_10x10_SRGB_BLOCK:
            return "ASTC_10x10_SRGB_BLOCK";
        case VK_FORMAT_ASTC_12x10_UNORM_BLOCK:
            return "ASTC_12x10_UNORM_BLOCK";
        case VK_FORMAT_ASTC_12x10_SRGB_BLOCK:
            return "ASTC_12x10_SRGB_BLOCK";
        case VK_FORMAT_ASTC_12x12_UNORM_BLOCK:
            return "ASTC_12x12_UNORM_BLOCK";
        case VK_FORMAT_ASTC_12x12_SRGB_BLOCK:
            return "ASTC_12x12_SRGB_BLOCK";
        case VK_FORMAT_G8B8G8R8_422_UNORM:
            return "G8B8G8R8_422_UNORM";
        case VK_FORMAT_B8G8R8G8_422_UNORM:
            return "B8G8R8G8_422_UNORM";
        case VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM:
            return "G8_B8_R8_3PLANE_420_UNORM";
        case VK_FORMAT_G8_B8R8_2PLANE_420_UNORM:
            return "G8_B8R8_2PLANE_420_UNORM";
        case VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM:
            return "G8_B8_R8_3PLANE_422_UNORM";
        case VK_FORMAT_G8_B8R8_2PLANE_422_UNORM:
            return "G8_B8R8_2PLANE_422_UNORM";
        case VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM:
            return "G8_B8_R8_3PLANE_444_UNORM";
        case VK_FORMAT_R10X6_UNORM_PACK16:
            return "R10X6_UNORM_PACK16";
        case VK_FORMAT_R10X6G10X6_UNORM_2PACK16:
            return "R10X6G10X6_UNORM_2PACK16";
        case VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16:
            return "R10X6G10X6B10X6A10X6_UNORM_4PACK16";
        case VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16:
            return "G10X6B10X6G10X6R10X6_422_UNORM_4PACK16";
        case VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16:
            return "B10X6G10X6R10X6G10X6_422_UNORM_4PACK16";
        case VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16:
            return "G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16";
        case VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16:
            return "G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16";
        case VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16:
            return "G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16";
        case VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16:
            return "G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16";
        case VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16:
            return "G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16";
        case VK_FORMAT_R12X4_UNORM_PACK16:
            return "R12X4_UNORM_PACK16";
        case VK_FORMAT_R12X4G12X4_UNORM_2PACK16:
            return "R12X4G12X4_UNORM_2PACK16";
        case VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16:
            return "R12X4G12X4B12X4A12X4_UNORM_4PACK16";
        case VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16:
            return "G12X4B12X4G12X4R12X4_422_UNORM_4PACK16";
        case VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16:
            return "B12X4G12X4R12X4G12X4_422_UNORM_4PACK16";
        case VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16:
            return "G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16";
        case VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16:
            return "G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16";
        case VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16:
            return "G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16";
        case VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16:
            return "G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16";
        case VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16:
            return "G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16";
        case VK_FORMAT_G16B16G16R16_422_UNORM:
            return "G16B16G16R16_422_UNORM";
        case VK_FORMAT_B16G16R16G16_422_UNORM:
            return "B16G16R16G16_422_UNORM";
        case VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM:
            return "G16_B16_R16_3PLANE_420_UNORM";
        case VK_FORMAT_G16_B16R16_2PLANE_420_UNORM:
            return "G16_B16R16_2PLANE_420_UNORM";
        case VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM:
            return "G16_B16_R16_3PLANE_422_UNORM";
        case VK_FORMAT_G16_B16R16_2PLANE_422_UNORM:
            return "G16_B16R16_2PLANE_422_UNORM";
        case VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM:
            return "G16_B16_R16_3PLANE_444_UNORM";
        case VK_FORMAT_G8_B8R8_2PLANE_444_UNORM:
            return "G8_B8R8_2PLANE_444_UNORM";
        case VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16:
            return "G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16";
        case VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16:
            return "G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16";
        case VK_FORMAT_G16_B16R16_2PLANE_444_UNORM:
            return "G16_B16R16_2PLANE_444_UNORM";
        case VK_FORMAT_A4R4G4B4_UNORM_PACK16:
            return "A4R4G4B4_UNORM_PACK16";
        case VK_FORMAT_A4B4G4R4_UNORM_PACK16:
            return "A4B4G4R4_UNORM_PACK16";
        case VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK:
            return "ASTC_4x4_SFLOAT_BLOCK";
        case VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK:
            return "ASTC_5x4_SFLOAT_BLOCK";
        case VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK:
            return "ASTC_5x5_SFLOAT_BLOCK";
        case VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK:
            return "ASTC_6x5_SFLOAT_BLOCK";
        case VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK:
            return "ASTC_6x6_SFLOAT_BLOCK";
        case VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK:
            return "ASTC_8x5_SFLOAT_BLOCK";
        case VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK:
            return "ASTC_8x6_SFLOAT_BLOCK";
        case VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK:
            return "ASTC_8x8_SFLOAT_BLOCK";
        case VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK:
            return "ASTC_10x5_SFLOAT_BLOCK";
        case VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK:
            return "ASTC_10x6_SFLOAT_BLOCK";
        case VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK:
            return "ASTC_10x8_SFLOAT_BLOCK";
        case VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK:
            return "ASTC_10x10_SFLOAT_BLOCK";
        case VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK:
            return "ASTC_12x10_SFLOAT_BLOCK";
        case VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK:
            return "ASTC_12x12_SFLOAT_BLOCK";
        case VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG:
            return "PVRTC1_2BPP_UNORM_BLOCK_IMG";
        case VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG:
            return "PVRTC1_4BPP_UNORM_BLOCK_IMG";
        case VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG:
            return "PVRTC2_2BPP_UNORM_BLOCK_IMG";
        case VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG:
            return "PVRTC2_4BPP_UNORM_BLOCK_IMG";
        case VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG:
            return "PVRTC1_2BPP_SRGB_BLOCK_IMG";
        case VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG:
            return "PVRTC1_4BPP_SRGB_BLOCK_IMG";
        case VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG:
            return "PVRTC2_2BPP_SRGB_BLOCK_IMG";
        case VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG:
            return "PVRTC2_4BPP_SRGB_BLOCK_IMG";
        case VK_FORMAT_R16G16_S10_5_NV:
            return "R16G16_S10_5_NV";
    }
}
