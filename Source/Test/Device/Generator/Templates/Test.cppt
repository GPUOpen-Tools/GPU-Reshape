// Generated File

// Test defines
$DEFINES

// Test
#include <Test/Device/IDevice.h>
#include <Test/Device/Catch2.h>
#include <Test/Device/ShaderHost.h>

// Backend
#include <Backend/IShaderSGUIDHost.h>
#include <Backend/Environment.h>
#include <Backend/EnvironmentInfo.h>
#include <Backend/FeatureHost.h>
#include <Backend/ShaderSGUIDHostListener.h>

// Bridge
#include <Bridge/IBridgeListener.h>
#include <Bridge/IBridge.h>

// Message
#include <Message/IMessageStorage.h>

// Devices
#ifdef ENABLE_BACKEND_VULKAN
#include <Test/Device/Vulkan/Device.h>
#endif // ENABLE_BACKEND_VULKAN
#ifdef ENABLE_BACKEND_DX12
#include <Test/Device/DX12/Device.h>
#endif // ENABLE_BACKEND_DX12

// Common
#include <Common/Registry.h>
#include <Common/Sink.h>

// Std
#include <functional>

// Shared schemas
#include <Schemas/Config.h>
#include <Schemas/Instrumentation.h>
#include <Schemas/SGUID.h>

// Test includes
$INCLUDES

using namespace Test;

// Execute test
#if !INLINE_EXECUTOR
extern void $EXECUTOR(Test::IDevice*);
#endif // INLINE_EXECUTOR

namespace {

$CONSTRAINTS;

#if INLINE_EXECUTOR
static void $TEST_NAMEExecutor(Test::IDevice* device) {
    // Optional, resource set
    ResourceSetID resourceSet;

    // All layouts
    std::vector<ResourceLayoutID> layouts;

    // Any resources?
    const bool hasResources = $HAS_RESOURCES;
    if (hasResources) {
        // Create all resources
        $RESOURCES_CREATE

        // Types for layout definition
        ResourceType resourceTypes[] = {
            $RESOURCES_TYPES
        };

        // Create layout
        ResourceLayoutID layout = device->CreateResourceLayout(resourceTypes, sizeof(resourceTypes) / sizeof(ResourceType));

        // Resources for set
        ResourceID resources[] = {
            $RESOURCES_SET
        };

        // Create set
        resourceSet = device->CreateResourceSet(layout, resources, sizeof(resources) / sizeof(ResourceID));

        // Add layout
        layouts.push_back(layout);
    }

    // Get the shader
    ShaderBlob blob = ShaderHost::Get("$TEST_NAME", device->GetName());

    // Create pipeline
    PipelineID pipeline = device->CreateComputePipeline(layouts.data(), static_cast<uint32_t>(layouts.size()), blob.code, blob.length);

    // Create command buffer
    CommandBufferID commandBuffer = device->CreateCommandBuffer(QueueType::Graphics);

    // Begin!
    device->BeginCommandBuffer(commandBuffer);

    // Init all resources
    device->InitializeResources(commandBuffer);

    // Bind pipeline and resources
    device->BindPipeline(commandBuffer, pipeline);

    // Bind resources if needed
    if (hasResources) {
        device->BindResourceSet(commandBuffer, 0u, resourceSet);
    }

    $COMMANDS

    // End!
    device->EndCommandBuffer(commandBuffer);

    // Submit on generic graphics
    device->Submit(device->GetQueue(QueueType::Graphics), commandBuffer);
}
#endif // INLINE_EXECUTOR

template<typename DEVICE>
class $TEST_NAMERunner {
public:
    void Run() {
        Backend::EnvironmentInfo info;
        info.memoryBridge = true;
        environment.Install(info);

        // Get the shared registry
        Registry* registry = environment.GetRegistry();

        // Get common objects
        auto bridge = registry->Get<IBridge>();

        // Add sguid listener
        bridge->Register(ShaderSourceMappingMessage::kID, registry->AddNew<ShaderSGUIDHostListener>());

$CONSTRAINT_INSTALL

        Execute();
        Validate();
    }

private:
    void ConfigureBridge() {
        // Get common objects
        auto bridge = environment.GetRegistry()->Get<IBridge>();

        // Ordered stream
        MessageStream stream;
#ifdef _MSC_VER // Clang-cl bug, works fine for other tests
        MessageStreamView<void, MessageStream> view(stream);
#else // _MSC_VER
        MessageStreamView view(stream);
#endif // _MSC_VER

        // Make the recording wait for compilation
        auto config = view.Add<SetInstrumentationConfigMessage>();
        config->synchronousRecording = 1u;

        // Specialization stream
        MessageStream specializationStream;
        MessageStreamView<> specializationView(specializationStream);

#if SAFE_GUARDED
        // Mark as safe-guarded
        auto set = specializationView.Add<SetSafeGuardMessage>();
        set->enabled = 1u;
#endif // SAFE_GUARDED

        // Global instrumentation
        auto msg = view.Add<SetGlobalInstrumentationMessage>(SetGlobalInstrumentationMessage::AllocationInfo {
            .specializationByteSize = specializationStream.GetByteSize()
        });
        msg->featureBitSet = ~0ull;

        // Transfer
        msg->specialization.Set(specializationStream);

        // Submit configuration
        bridge->GetOutput()->AddStream(stream);
        bridge->Commit();
    }

    void Execute() {
        Registry* registry = environment.GetRegistry();

        // Create a device
        auto device = registry->AddNew<DEVICE>();

        // Install the device
        Test::DeviceInfo info{};
        info.enableValidation = false;
        device->Install(info);

        // Set the bridge up for the expected communication
        ConfigureBridge();

        // Execute test
#if INLINE_EXECUTOR
        $TEST_NAMEExecutor(device.GetUnsafe());
#else // INLINE_EXECUTOR
        $EXECUTOR(device.GetUnsafe());
#endif // INLINE_EXECUTOR

        // Flush pending work
        device->Flush();
    }

    void Validate() {
$CONSTRAINT_VALIDATE
    }

private:
    Backend::Environment environment;

$CONSTRAINT_FIELDS
};

TEST_CASE("GRS.Features.$FEATURE_NAME.$TEST_NAME") {
#ifdef ENABLE_BACKEND_VULKAN
    SECTION("Vulkan") {
        $TEST_NAMERunner<Vulkan::Device>{}.Run();
    }
#endif // ENABLE_BACKEND_VULKAN

#ifdef ENABLE_BACKEND_DX12
    SECTION("DX12") {
        $TEST_NAMERunner<DX12::Device>{}.Run();
    }
#endif // ENABLE_BACKEND_DX12
}

}
